name: MLFlow CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CSV_URL: "MLproject/lung_cancer_clean.csv"
  TARGET_VAR: "Lung_Cancer"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Run actions/checkout@v3 
      uses: actions/checkout@v3

    - name: Set up Python 3.12.7
      uses: actions/setup-python@v4
      with:
        python-version: 3.12.7

    - name: Check Env
      run: |
        echo $CSV_URL
        python --version
        pip --version

    - name: Install dependencies
      run: |
        pip install -r ./MLProject/requirements.txt

    - name: Run mlflow project
      run: |
        cd MLProject
        mlflow run . --env-manager=local

    - name: Get latest MLflow run_id
      run: |
        cd MLProject
        # Set the same tracking URI as in modelling.py
        export MLFLOW_TRACKING_URI="file:./mlruns"
        
        # Check if mlruns directory exists
        if [ ! -d "mlruns" ]; then
          echo "Error: mlruns directory not found"
          exit 1
        fi
        
        # Get the latest run ID using MLflow Python API
        RUN_ID=$(python -c "
import mlflow
import os
os.chdir('.')
mlflow.set_tracking_uri('file:./mlruns')
client = mlflow.tracking.MlflowClient()
try:
    experiments = client.search_experiments()
    if experiments:
        exp_id = experiments[0].experiment_id
        runs = client.search_runs(experiment_ids=[exp_id], order_by=['start_time DESC'], max_results=1)
        if runs:
            print(runs[0].info.run_id)
        else:
            print('NO_RUN_FOUND')
    else:
        print('NO_EXPERIMENT_FOUND')
except Exception as e:
    print('ERROR: ' + str(e))
")
        
        echo "Found RUN_ID: $RUN_ID"
        
        # Verify run exists and is valid
        if [[ "$RUN_ID" == "NO_RUN_FOUND" || "$RUN_ID" == "NO_EXPERIMENT_FOUND" || "$RUN_ID" == ERROR* ]]; then
          echo "Error: No valid MLflow run found. RUN_ID: $RUN_ID"
          echo "Listing mlruns directory contents:"
          find mlruns -type f -name "meta.yaml" | head -5
          exit 1
        fi
        
        echo "RUN_ID=$RUN_ID" >> $GITHUB_ENV

    - name: Install Python dependencies
      run: |
        echo "Install dependencies dari model jika perlu"
        # Contoh jika model tersimpan di model_dir/model
        pip install -r model_dir/model/requirements.txt || echo "Tidak ada file requirements"

    - name: Upload to Google Drive
      run: |
        echo "Simulasi upload artifact ke Google Drive"

    - name: Build Docker Model
      run: |
        docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/cc:latest .

    - name: Log in to Docker Hub
      run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

    - name: Tag Docker Image
      run: |
        docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/cc:latest ${{ secrets.DOCKER_HUB_USERNAME }}/cc:v1.0.0

    - name: Push Docker Image
      run: |
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/cc:latest
        docker push ${{ secrets.DOCKER_HUB_USERNAME }}/cc:v1.0.0
